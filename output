{TYPE: 1 | WORD: Vector2 | LINE: 1}
{TYPE: 2 | WORD: : | LINE: 1}
{TYPE: 1 | WORD: struct | LINE: 1}
{TYPE: 2 | WORD: { | LINE: 1}
{TYPE: 1 | WORD: x | LINE: 2}
{TYPE: 2 | WORD: : | LINE: 2}
{TYPE: 1 | WORD: int | LINE: 2}
{TYPE: 2 | WORD: ; | LINE: 2}
{TYPE: 1 | WORD: y | LINE: 3}
{TYPE: 2 | WORD: : | LINE: 3}
{TYPE: 1 | WORD: int | LINE: 3}
{TYPE: 2 | WORD: ; | LINE: 3}
{TYPE: 2 | WORD: } | LINE: 4}
{TYPE: 1 | WORD: Matrix | LINE: 6}
{TYPE: 2 | WORD: : | LINE: 6}
{TYPE: 1 | WORD: struct | LINE: 6}
{TYPE: 2 | WORD: { | LINE: 6}
{TYPE: 1 | WORD: v0 | LINE: 7}
{TYPE: 2 | WORD: : | LINE: 7}
{TYPE: 1 | WORD: Vector2 | LINE: 7}
{TYPE: 2 | WORD: ; | LINE: 7}
{TYPE: 1 | WORD: v1 | LINE: 8}
{TYPE: 2 | WORD: : | LINE: 8}
{TYPE: 1 | WORD: Vector2 | LINE: 8}
{TYPE: 2 | WORD: ; | LINE: 8}
{TYPE: 2 | WORD: } | LINE: 9}
{TYPE: 1 | WORD: func | LINE: 11}
{TYPE: 1 | WORD: factorial | LINE: 11}
{TYPE: 2 | WORD: ( | LINE: 11}
{TYPE: 1 | WORD: x | LINE: 11}
{TYPE: 2 | WORD: : | LINE: 11}
{TYPE: 1 | WORD: int | LINE: 11}
{TYPE: 2 | WORD: ) | LINE: 11}
{TYPE: 2 | WORD: -> | LINE: 11}
{TYPE: 1 | WORD: int | LINE: 11}
{TYPE: 2 | WORD: { | LINE: 11}
{TYPE: 7 | WORD: if | LINE: 12}
{TYPE: 2 | WORD: ( | LINE: 12}
{TYPE: 1 | WORD: x | LINE: 12}
{TYPE: 2 | WORD: == | LINE: 12}
{TYPE: 3 | WORD: 10 | LINE: 12}
{TYPE: 2 | WORD: ) | LINE: 12}
{TYPE: 2 | WORD: { | LINE: 12}
{TYPE: 13 | WORD: return | LINE: 13}
{TYPE: 3 | WORD: 20 | LINE: 13}
{TYPE: 2 | WORD: ; | LINE: 13}
{TYPE: 2 | WORD: } | LINE: 14}
{TYPE: 13 | WORD: return | LINE: 15}
{TYPE: 3 | WORD: 30 | LINE: 15}
{TYPE: 2 | WORD: ; | LINE: 15}
{TYPE: 2 | WORD: } | LINE: 16}
{TYPE: 1 | WORD: func | LINE: 18}
{TYPE: 1 | WORD: main | LINE: 18}
{TYPE: 2 | WORD: ( | LINE: 18}
{TYPE: 2 | WORD: ) | LINE: 18}
{TYPE: 2 | WORD: -> | LINE: 18}
{TYPE: 1 | WORD: void | LINE: 18}
{TYPE: 2 | WORD: { | LINE: 18}
{TYPE: 1 | WORD: x | LINE: 20}
{TYPE: 2 | WORD: : | LINE: 20}
{TYPE: 1 | WORD: int | LINE: 20}
{TYPE: 2 | WORD: ; | LINE: 20}
{TYPE: 1 | WORD: y | LINE: 21}
{TYPE: 2 | WORD: : | LINE: 21}
{TYPE: 1 | WORD: int | LINE: 21}
{TYPE: 2 | WORD: ; | LINE: 21}
{TYPE: 1 | WORD: z | LINE: 22}
{TYPE: 2 | WORD: : | LINE: 22}
{TYPE: 1 | WORD: int | LINE: 22}
{TYPE: 2 | WORD: ; | LINE: 22}
{TYPE: 1 | WORD: v | LINE: 23}
{TYPE: 2 | WORD: : | LINE: 23}
{TYPE: 1 | WORD: Matrix | LINE: 23}
{TYPE: 2 | WORD: ; | LINE: 23}
{TYPE: 1 | WORD: x | LINE: 25}
{TYPE: 2 | WORD: = | LINE: 25}
{TYPE: 3 | WORD: 10 | LINE: 25}
{TYPE: 2 | WORD: ; | LINE: 25}
{TYPE: 1 | WORD: y | LINE: 26}
{TYPE: 2 | WORD: = | LINE: 26}
{TYPE: 3 | WORD: 20 | LINE: 26}
{TYPE: 2 | WORD: ; | LINE: 26}
{TYPE: 1 | WORD: z | LINE: 27}
{TYPE: 2 | WORD: = | LINE: 27}
{TYPE: 3 | WORD: 30 | LINE: 27}
{TYPE: 2 | WORD: ; | LINE: 27}
{TYPE: 1 | WORD: factorial | LINE: 29}
{TYPE: 2 | WORD: ( | LINE: 29}
{TYPE: 3 | WORD: 10 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 20 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 30 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 40 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 50 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 60 | LINE: 29}
{TYPE: 2 | WORD: , | LINE: 29}
{TYPE: 3 | WORD: 70 | LINE: 29}
{TYPE: 2 | WORD: + | LINE: 29}
{TYPE: 3 | WORD: 80 | LINE: 29}
{TYPE: 2 | WORD: + | LINE: 29}
{TYPE: 3 | WORD: 90 | LINE: 29}
{TYPE: 2 | WORD: ) | LINE: 29}
{TYPE: 2 | WORD: ; | LINE: 29}
{TYPE: 2 | WORD: } | LINE: 31}
AST printout:
BLOCK: {
  LOCALS: {
  }
  CHILDREN: {
    FUNCTION: {
      NAME: factorial
      RETURNS: void
      ARGS: {
        x: int
      }
    }
    BLOCK: {
      LOCALS: {
      }
      CHILDREN: {
        IF: {
          COND: {
            |1
              x
              10
          }
        }
        BLOCK: {
          LOCALS: {
          }
          CHILDREN: {
            RETURN: {
              20
            }
          }
        }
        RETURN: {
          30
        }
      }
    }
    FUNCTION: {
      NAME: main
      RETURNS: void
      ARGS: {
      }
    }
    BLOCK: {
      LOCALS: {
        x: int
        y: int
        z: int
        v: Matrix
      }
      CHILDREN: {
        STMT: {
          =|61
            x
            10
        }
        STMT: {
          =|61
            y
            20
        }
        STMT: {
          =|61
            z
            30
        }
        STMT: {
          CALL
            factorial
            ,|44
              ,|44
                ,|44
                  ,|44
                    ,|44
                      ,|44
                        10
                        20
                      30
                    40
                  50
                60
              +|43
                +|43
                  70
                  80
                90
        }
      }
    }
  }
}
registered functions:
function: main
function: factorial
FOUND x as 0x56525efb4760
LOL 0x56525efb4760
FOUND x as 0x56525efb4eb0
LOL 0x56525efb4eb0
LOL 0x56525efb6130
FOUND y as 0x56525efb4f60
LOL 0x56525efb4f60
LOL 0x56525efb6250
FOUND z as 0x56525efb5010
LOL 0x56525efb5010
LOL 0x56525efb6370
FOUND factorial as 0x56525efb46b0
LOL 0x56525efb46b0
LOL 0x56525efb47c0
LOL 0x56525efb4760
LOL 0x56525efb6840
LOL 0x56525efb6900
LOL 0x56525efb64f0
assign x 0
function factorial needs stack space 8
assign x 0
assign y 8
assign z 16
assign v 24
function main needs stack space 32
